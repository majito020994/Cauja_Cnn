// Llamar matriz de datos
#include "matriz_entrenamiento.h"
float datos_prueba[5]={5,3.5,1.3,0.3,1.0};
int respuesta;

void setup() {
Serial.begin(9600);
}

void loop() {
cnn(3,5,120);
//respuesta=knn(3,3,5,120);
//Serial.println(cnn);
delay (5000);
}
void cnn(int etiquetas,int tam_col, int tam_fil){
    int i;
    int j;
    int l;
   float centroid(0);
   float promedio=0;
   float distancia_menor=3000;
   float distancia=0;
   int s; //contar los datos en source
   int label;
   int f; // recorrer en fila 
   int c;//recorrer en columna
   float d=0;
      /*
       * centroides ->promedio
       *              promedio por columna y por etiqueta
       *              almacena vectores
       *              knn entre vectores y matriz de entrenamiento
       */
       float centroides[etiquetas][tam_col];
       for(i=0;i<etiquetas;i++){ 
        for(j=0;j<tam_col;j++){
          if(j==tam_col-1){ //llenar etiqueta a cada centroide
          centroides[i][j]=i+1; 
          } else{
             centroides[i][j]=0; //lleno de ceros al resto de la matriz
                       }
       }
       for(l=0;l<etiquetas;l++){
        for(i=0;i<tam_col-1;i++){
          for(j=(40*l);j<40*(l+1);j++){ 
            centroid= centroid+matriz[j][i];
          }
          centroides[l][i]=centroid/40; //promedio segun las etiquetas
         //Serial.println(centroides[l][i],4); 
       // Serial.println(',');
        
          centroid=0;
        }
        //Serial.println(centroides[l][tam_col-1]);
       }
       //encontrar la distancia entre los centroides y la matriz de entrenamiento
       //para comparar si clasifica adecuadamente
         //for-->filas de matriz de entrenamiento i se mueve en matriz
          //for -->filas de matriz de centroides j se mueve en los centroides
           //for-->columnas
           for(i=0;i<tam_fil;i++){
            for(j=0;j<etiquetas;j++){
              for(l=0;l<tam_col-1;l++){
                promedio=promedio+pow(centroides[j][l]-matriz[i][l],2);
                   }
            distancia=sqrt(promedio);
            if(distancia<distancia_menor){
              distancia_menor=distancia;
              label=centroides[j][tam_col-1];
              Serial.println(distancia);
              Serial.print(',');
              Serial.print(' ');
            }
            promedio=0;
            }
            distancia_menor=3000;
                        if(matriz[i][tam_col-1]==label){
             Serial.print(String(i)+":");
              Serial.println("D");
            } else{
              Serial.print(String(i)+":");
              Serial.println("S");
                s++;
            }
           }
            
           float matriz_s [s+etiquetas][tam_col]; // matriz
           for(f=0;f<s;f++){  //recorres filas y columnas
            for(c=0;c<tam_col;c++){  
             Serial.println(distancia);
             }
                        }
             delay (9000);
                    }  
       }

} 
